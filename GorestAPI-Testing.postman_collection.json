{
	"info": {
		"_postman_id": "8d075973-95ed-4dce-96e5-88e3eab448fe",
		"name": "GorestAPI-Testing",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "27556724"
	},
	"item": [
		{
			"name": "CreateUser",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var random=Math.random().toString(36).substring(2);\r",
							"\r",
							"var useremail=\"abc\"+random+\"@gmail.com\";\r",
							"var username=\"abc123\"+random;\r",
							"\r",
							"//creating environment variable to pass username and username to body section (api chaining)\r",
							"pm.environment.set(\"email_env\",useremail);\r",
							"pm.environment.set(\"name_env\", username);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Validating status code\r",
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Successful POST request\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
							"});\r",
							"\r",
							"//validating response time\r",
							"pm.test(\"Response time is less than 500ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"\r",
							"//Creating environment variable for api chaining\r",
							"var jsonData=JSON.parse(responseBody);\r",
							"pm.environment.set(\"userid_env\", jsonData.id);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"{{name_env}}\",\r\n    \"gender\": \"male\",\r\n    \"email\": \"{{email_env}}\",\r\n    \"status\":\"inactive\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BaseURL}}",
					"host": [
						"{{BaseURL}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "GetUser Details",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//validating wheather the api returning the correct response value or not\r",
							"//Validating json fields in response\r",
							"pm.test(\"values of json fields\", ()=>{\r",
							"    var jsonData=pm.response.json();\r",
							"\r",
							"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"userid_env\"));\r",
							"    pm.expect(jsonData.email).to.eql(pm.environment.get(\"email_env\"));\r",
							"    pm.expect(jsonData.name).to.eql(pm.environment.get(\"name_env\"));\r",
							"    pm.expect(jsonData.gender).to.eql(\"male\");\r",
							"    pm.expect(jsonData.status).to.eql(\"inactive\");\r",
							"});\r",
							"\r",
							"//Testing Status Code\r",
							"pm.test(\"Status code is 200\", ()=>{\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Successful Get request\", ()=>{\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
							"});\r",
							"\r",
							"//Testing Headers\r",
							"pm.test(\"Content-Type header is present\", ()=>{\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"\r",
							"pm.test(\"content-Type header is application/json\", ()=>{\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
							"});\r",
							"\r",
							"//Testing response times\r",
							"pm.test(\"Response time is less than 500ms\", ()=>{\r",
							"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"\r",
							"//Test the data type of any part of the response\r",
							"const jsonData = pm.response.json();\r",
							"pm.test(\"Test data type of the response\", ()=>{\r",
							"    pm.expect(jsonData).to.be.an(\"object\");\r",
							"    pm.expect(jsonData.name).to.be.a(\"string\");\r",
							"    pm.expect(jsonData.id).to.be.a(\"number\");\r",
							"    pm.expect(jsonData.email).to.be.a(\"string\");\r",
							"    pm.expect(jsonData.gender).to.be.a(\"string\");\r",
							"    pm.expect(jsonData.status).to.be.a(\"string\");\r",
							"});\r",
							"\r",
							"//JSON schema validation\r",
							"var schema = {\r",
							"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"id\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"name\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"email\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"gender\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"status\": {\r",
							"      \"type\": \"string\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"id\",\r",
							"    \"name\",\r",
							"    \"email\",\r",
							"    \"gender\",\r",
							"    \"status\"\r",
							"  ]\r",
							"}\r",
							"pm.test(\"Schema is valid\", function(){\r",
							"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BaseURL}}/{{userid_env}}",
					"host": [
						"{{BaseURL}}"
					],
					"path": [
						"{{userid_env}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "update",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var random=Math.random().toString(36).substring(2);\r",
							"\r",
							"var useremail=\"jim\"+random+\"@gmail.com\";\r",
							"var username=\"jim\"+random;\r",
							"\r",
							"pm.environment.set(\"email_env\",useremail);\r",
							"pm.environment.set(\"name_env\", username);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Testing Status Code\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Successful put request\", ()=>{\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
							"});\r",
							"\r",
							"//Testing Headers\r",
							"pm.test(\"Content-Type header is present\", ()=>{\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"\r",
							"pm.test(\"content-Type header is application/json\", ()=>{\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
							"});\r",
							"\r",
							"//Testing response times\r",
							"pm.test(\"Response time is less than 500ms\", ()=>{\r",
							"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"{{name_env}}\",\r\n    \"email\": \"{{email_env}}\",\r\n    \"status\":\"active\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BaseURL}}/{{userid_env}}",
					"host": [
						"{{BaseURL}}"
					],
					"path": [
						"{{userid_env}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Cross check updated values",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"//validating wheather the api returning the correct response value or not\r",
							"//Validating json fields in response\r",
							"pm.test(\"values of json fields\", ()=>{\r",
							"    var jsonData=pm.response.json();\r",
							"\r",
							"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"userid_env\"));\r",
							"    pm.expect(jsonData.email).to.eql(pm.environment.get(\"email_env\"));\r",
							"    pm.expect(jsonData.name).to.eql(pm.environment.get(\"name_env\"));\r",
							"    pm.expect(jsonData.gender).to.eql(\"male\");\r",
							"    pm.expect(jsonData.status).to.eql(\"active\");\r",
							"});\r",
							"\r",
							"//Testing Status Code\r",
							"pm.test(\"Status code is 200\", ()=>{\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Successful Get request\", ()=>{\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
							"});\r",
							"\r",
							"//Testing Headers\r",
							"pm.test(\"Content-Type header is present\", ()=>{\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"\r",
							"pm.test(\"content-Type header is application/json\", ()=>{\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
							"});\r",
							"\r",
							"//Testing response times\r",
							"pm.test(\"Response time is less than 500ms\", ()=>{\r",
							"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"\r",
							"//Test the data type of any part of the response\r",
							"const jsonData = pm.response.json();\r",
							"pm.test(\"Test data type of the response\", ()=>{\r",
							"    pm.expect(jsonData).to.be.an(\"object\");\r",
							"    pm.expect(jsonData.name).to.be.a(\"string\");\r",
							"    pm.expect(jsonData.id).to.be.a(\"number\");\r",
							"    pm.expect(jsonData.email).to.be.a(\"string\");\r",
							"    pm.expect(jsonData.gender).to.be.a(\"string\");\r",
							"    pm.expect(jsonData.status).to.be.a(\"string\");\r",
							"});\r",
							"\r",
							"//JSON schema validation\r",
							"var schema = {\r",
							"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"id\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"name\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"email\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"gender\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"status\": {\r",
							"      \"type\": \"string\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"id\",\r",
							"    \"name\",\r",
							"    \"email\",\r",
							"    \"gender\",\r",
							"    \"status\"\r",
							"  ]\r",
							"}\r",
							"pm.test(\"Schema is valid\", function(){\r",
							"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BaseURL}}/{{userid_env}}",
					"host": [
						"{{BaseURL}}"
					],
					"path": [
						"{{userid_env}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.environment.unset(\"userid_env\");\r",
							"pm.environment.unset(\"email_env\");\r",
							"pm.environment.unset(\"name_env\");\r",
							"\r",
							"pm.test(\"Status code is 204\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});\r",
							"pm.test(\"Response time is less than 500ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{BaseURL}}/{{userid_env}}",
					"host": [
						"{{BaseURL}}"
					],
					"path": [
						"{{userid_env}}"
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "86f47925802211e792f861d7be3aa334a142f76c360da2b3558341b2bd20c0dc",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "BaseURL",
			"value": "https://gorest.co.in/public/v2/users",
			"type": "string"
		}
	]
}